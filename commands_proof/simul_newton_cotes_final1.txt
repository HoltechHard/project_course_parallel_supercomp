=================================================================
| 	SIMULATION - FINAL ALGORITHM OF MPI-PYTHON - NEWTON-COTES   |
=================================================================

1) copy the folders with experiments

$ scp -r /home/holger2022/exp1 tm5u6@login1.hpc.spbstu.ru:
Enter passphrase for key '/home/holger2022/.ssh/id_rsa':
								exp1_k2.txt                                                                                                       100%   29     0.7KB/s   00:00
								exp1_k4.txt                                                                                                       100%   29     0.7KB/s   00:00
								exp1_k3.txt                                                                                                       100%   29     0.7KB/s   00:00
								exp1_k1.txt                                                                                                       100%   29     0.5KB/s   00:00
								exp1_k5.txt                                                                                                       100%   29     0.7KB/s   00:00

$ scp -r /home/holger2022/exp2 tm5u6@login1.hpc.spbstu.ru:
Enter passphrase for key '/home/holger2022/.ssh/id_rsa':
								exp2_k2.txt                                                                                                       100%   42     0.6KB/s   00:00
								exp2_k3.txt                                                                                                       100%   42     0.6KB/s   00:00
								exp2_k7.txt                                                                                                       100%   42     0.7KB/s   00:00
								exp2_k1.txt                                                                                                       100%   42     0.8KB/s   00:00
								exp2_k10.txt                                                                                                      100%   43     0.7KB/s   00:00

$ scp -r /home/holger2022/exp3 tm5u6@login1.hpc.spbstu.ru:
Enter passphrase for key '/home/holger2022/.ssh/id_rsa':
								exp3_k5.txt                                                                                                       100%   60     1.1KB/s   00:00
								exp3_k8.txt                                                                                                       100%   60     1.1KB/s   00:00
								exp3_k10.txt                                                                                                      100%   61     1.0KB/s   00:00
								exp3_k2.txt                                                                                                       100%   60     1.4KB/s   00:00
								exp3_k1.txt                                                                                                       100%   60     1.2KB/s   00:00


$ scp -r /home/holger2022/exp4 tm5u6@login1.hpc.spbstu.ru:
Enter passphrase for key '/home/holger2022/.ssh/id_rsa':
								exp4_k4.txt                                                                                                       100%  148     3.0KB/s   00:00
								exp4_k8.txt                                                                                                       100%  148     2.7KB/s   00:00
								exp4_k10.txt                                                                                                      100%  149     2.0KB/s   00:00
								exp4_k6.txt                                                                                                       100%  148     2.2KB/s   00:00
								exp4_k1.txt                                                                                                       100%  148     2.7KB/s   00:00

2) copy the file in python with algorithm

$ scp /home/holger2022/newton_cotes_final1.py tm5u6@login1.hpc.spbstu.ru:
Enter passphrase for key '/home/holger2022/.ssh/id_rsa':
newton_cotes_final1.py                                                       100% 8001   118.0KB/s   00:00

3) connect with supercomputer

$ ssh -i ~/.ssh/id_rsa tm5u6@login1.hpc.spbstu.ru

Enter passphrase for key '/home/holger2022/.ssh/id_rsa':
Last login: Thu Dec  1 22:41:45 2022 from 94.25.229.195


  /$$$$$$   /$$$$$$   /$$$$$$         /$$$$$$  /$$$$$$$  /$$       /$$$$$$$  /$$   /$$
 /$$__  $$ /$$__  $$ /$$__  $$       /$$__  $$| $$__  $$| $$      | $$__  $$| $$  | $$
| $$  \__/| $$  \__/| $$  \__/      | $$  \__/| $$  \ $$| $$$$$$$ | $$  \ $$| $$  | $$
|  $$$$$$ | $$      | $$            |  $$$$$$ | $$$$$$$/| $$__  $$| $$$$$$$/| $$  | $$
 \____  $$| $$      | $$             \____  $$| $$____/ | $$  \ $$| $$____/ | $$  | $$
 /$$  \ $$| $$    $$| $$    $$       /$$  \ $$| $$      | $$  | $$| $$      | $$  | $$
|  $$$$$$/|  $$$$$$/|  $$$$$$/      |  $$$$$$/| $$      | $$$$$$$/| $$      |  $$$$$$/
 \______/  \______/  \______/        \______/ |__/      |_______/ |__/       \______/


4) move the folders exp1, exp2, exp3 and exp4 and file newton_cotes_final1.py to folder labpy

tm5u6@login1:~/labpy
$ ls
ex           exp2  lab04_ex04.py           newton_cotes_vp1.py        newton_cotes_vp3.py       newton_cotes_vp5.py
exp1         exp3  lab05_ex03.py           newton_cotes_vp2.py        newton_cotes_vp4.py       test_proof.txt
exp1_k4.txt  exp4  newton_cotes_final1.py  newton_cotes_vp3_bcast.py  newton_cotes_vp5_hope.py

5) allocate 1 node

tm5u6@login1:~/labpy
$ salloc -N 1 -p cascade
salloc: Pending job allocation 2612870
salloc: job 2612870 queued and waiting for resources
salloc: job 2612870 has been allocated resources
salloc: Granted job allocation 2612870

6) verify the node

tm5u6@login1:~/labpy
$ squeue
             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)
           2612870   cascade       sh    tm5u6  R       0:03      1 n06p060

7) make connection ssh with the node

tm5u6@login1:~/labpy
$ ssh n06p060

8) activate environment for compile and run python file

[tm5u6@n06p060 labpy]$ source ex/bin/activate

9) add all necessary modules

(ex) [tm5u6@n06p060 labpy]$ module load python/3.8
(ex) [tm5u6@n06p060 labpy]$ module load compiler/gcc/9
(ex) [tm5u6@n06p060 labpy]$ module load mpi/openmpi/4.0.1/gcc/9


########################### FILE exp1/exp1_k4.txt #############################

10) execute python program for exp1_k4.txt for 10 processes 

(ex) [tm5u6@n06p060 labpy]$ mpirun -np 10 python3 newton_cotes_final1.py

11) Enter name of file

Name of file:
Name of file: This is the process  1
This is the process  2
This is the process  3
This is the process  4
This is the process  5
This is the process  6
This is the process  7
This is the process  8
This is the process  9

exp1/exp1_k4.txt

12) Read the input data from file

 #############
Process  0  ===> variables:
a =  0.0
b =  3.141592653589793
k =  4
q =  10
expression =  math.sin(x)
I =  2.0

 #############
Process  2  ===> variables:
a =  0.0
b =  3.141592653589793
k =  4
q =  10
expression =  math.sin(x)
I =  2.0
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}

 #############
Process  4  ===> variables:
a =  0.0
b =  3.141592653589793
k =  4
q =  10
expression =  math.sin(x)
I =  2.0

 #############
Process  6  ===> variables:
a =  0.0
b =  3.141592653589793
k =  4
q =  10
expression =  math.sin(x)
I =  2.0
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}

 #############
Process  8  ===> variables:
a =  0.0
b =  3.141592653589793
k =  4
q =  10
expression =  math.sin(x)
I =  2.0
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}

 #############
Process  9  ===> variables:
a =  0.0
b =  3.141592653589793
k =  4
q =  10
expression =  math.sin(x)
I =  2.0
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}

 #############
Process  1  ===> variables:
a =  0.0
b =  3.141592653589793
k =  4
q =  10
expression =  math.sin(x)
I =  2.0
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}

 #############
Process  3  ===> variables:
a =  0.0
b =  3.141592653589793
k =  4
q =  10
expression =  math.sin(x)
I =  2.0

 #############
Process  5  ===> variables:
a =  0.0
b =  3.141592653589793
k =  4
q =  10
expression =  math.sin(x)
I =  2.0
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}

 #############
Process  7  ===> variables:
a =  0.0
b =  3.141592653589793
k =  4
q =  10
expression =  math.sin(x)
I =  2.0
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}

13) Send/Receive of partial-data

Process  0  sends  5  values to process  1  ===>  [0.31415927 0.39269908 0.4712389  0.54977871 0.62831853]
Process  0  sends  5  values to process  2  ===>  [0.62831853 0.70685835 0.78539816 0.86393798 0.9424778 ]
Process  0  sends  5  values to process  3  ===>  [0.9424778  1.02101761 1.09955743 1.17809725 1.25663706]
Process  0  sends  5  values to process  4  ===>  [1.25663706 1.33517688 1.41371669 1.49225651 1.57079633]
Process  0  sends  5  values to process  5  ===>  [1.57079633 1.64933614 1.72787596 1.80641578 1.88495559]
Process  0  sends  5  values to process  6  ===>  [1.88495559 1.96349541 2.04203522 2.12057504 2.19911486]
Process  0  sends  5  values to process  7  ===>  [2.19911486 2.27765467 2.35619449 2.43473431 2.51327412]
Process  0  sends  5  values to process  8  ===>  [2.51327412 2.59181394 2.67035376 2.74889357 2.82743339]
Process  0  sends  5  values to process  9  ===>  [2.82743339 2.9059732  2.98451302 3.06305284 3.14159265]
Process  0  have this data:  [0.         0.07853982 0.15707963 0.23561945 0.31415927]
Process  8  <=== receive  5  values from process 0:  [2.51327412 2.59181394 2.67035376 2.74889357 2.82743339]
Process  9  <=== receive  5  values from process 0:  [2.82743339 2.9059732  2.98451302 3.06305284 3.14159265]
Process  5  <=== receive  5  values from process 0:  [1.57079633 1.64933614 1.72787596 1.80641578 1.88495559]
Process  6  <=== receive  5  values from process 0:  [1.88495559 1.96349541 2.04203522 2.12057504 2.19911486]
Process  7  <=== receive  5  values from process 0:  [2.19911486 2.27765467 2.35619449 2.43473431 2.51327412]
Process  4  <=== receive  5  values from process 0:  [1.25663706 1.33517688 1.41371669 1.49225651 1.57079633]
Process  1  <=== receive  5  values from process 0:  [0.31415927 0.39269908 0.4712389  0.54977871 0.62831853]
Process  3  <=== receive  5  values from process 0:  [0.9424778  1.02101761 1.09955743 1.17809725 1.25663706]
Process  2  <=== receive  5  values from process 0:  [0.62831853 0.70685835 0.78539816 0.86393798 0.9424778 ]


3  process ======>  [0.9424778  1.02101761 1.09955743 1.17809725 1.25663706]
1  process ======>  [0.31415927 0.39269908 0.4712389  0.54977871 0.62831853]
9  process ======>  [2.82743339 2.9059732  2.98451302 3.06305284 3.14159265]
7  process ======>  [2.19911486 2.27765467 2.35619449 2.43473431 2.51327412]
5  process ======>  [1.57079633 1.64933614 1.72787596 1.80641578 1.88495559]
2  process ======>  [0.62831853 0.70685835 0.78539816 0.86393798 0.9424778 ]
8  process ======>  [2.51327412 2.59181394 2.67035376 2.74889357 2.82743339]
6  process ======>  [1.88495559 1.96349541 2.04203522 2.12057504 2.19911486]
4  process ======>  [1.25663706 1.33517688 1.41371669 1.49225651 1.57079633]
0  process ======>  [0.         0.07853982 0.15707963 0.23561945 0.31415927]

14) Calculations of partial-integrals

Process  2  has f(x) ===>  [0.58778525 0.64944805 0.70710678 0.76040597 0.80901699]  with partial-integral =  0.22123174197222065
Time to calculate partial-integral =  0.209676  ms

Process  6  has f(x) ===>  [0.95105652 0.92387953 0.89100652 0.85264016 0.80901699]  with partial-integral =  0.27876825777859804
Time to calculate partial-integral =  0.221512  ms

Process  8  has f(x) ===>  [0.58778525 0.52249856 0.4539905  0.38268343 0.30901699]  with partial-integral =  0.14203952184941898
Time to calculate partial-integral =  0.207147  ms

Process  5  has f(x) ===>  [1.         0.99691733 0.98768834 0.97236992 0.95105652]  with partial-integral =  0.3090169942209449
Time to calculate partial-integral =  0.19445199999999999  ms

Process  3  has f(x) ===>  [0.80901699 0.85264016 0.89100652 0.92387953 0.95105652]  with partial-integral =  0.278768257778598
Time to calculate partial-integral =  0.19703299999999999  ms

Process  1  has f(x) ===>  [0.30901699 0.38268343 0.4539905  0.52249856 0.58778525]  with partial-integral =  0.14203952184941895
Time to calculate partial-integral =  0.192508  ms

Process  9  has f(x) ===>  [3.09016994e-01 2.33445364e-01 1.56434465e-01 7.84590957e-02
 1.22464680e-16]  with partial-integral =  0.04894348368045487
Time to calculate partial-integral =  0.795969  ms

Process  7  has f(x) ===>  [0.80901699 0.76040597 0.70710678 0.64944805 0.58778525]  with partial-integral =  0.2212317419722207
Time to calculate partial-integral =  0.198948  ms

Process  4  has f(x) ===>  [0.95105652 0.97236992 0.98768834 0.99691733 1.        ]  with partial-integral =  0.3090169942209449
Time to calculate partial-integral =  0.250958  ms

Process  0  has f(x) ===>  [0.         0.0784591  0.15643447 0.23344536 0.30901699]  with partial-integral =  0.04894348368045483
Time to calculate partial-integral =  0.25860299999999997  ms

Time to send/recv part-integrals =  0.18413399999999985  ms
Time to send/recv part-integrals =  0.020992999999999967  ms
Time to send/recv part-integrals =  0.018511000000000135  ms
Time to send/recv part-integrals =  0.017957999999999995  ms
Time to send/recv part-integrals =  0.018201999999999934  ms
Time to send/recv part-integrals =  0.01749999999999994  ms
Time to send/recv part-integrals =  0.01740200000000013  ms
Time to send/recv part-integrals =  0.017233999999999867  ms
Time to send/recv part-integrals =  0.01744400000000014  ms
Time to calculate approx-integral =  0.01513399999999998  ms

15) Final results

***** FINAL RESULTS ***** from process  0
Integral  math.sin(x)  with limits = (  0.0 ,  3.141592653589793 ) ===>
Exact-integral =  2.0
Approximate-integral =  1.9999999990032746
Absolute-error =  9.967253689069366e-10
Relative-error =  4.983626844534683e-08 %
Total-time to compute aproximate integral =  3.0713179999999998  ms
Finish!



########################### FILE exp2/exp2_k7.txt #############################

10) execute python program for exp1_k4.txt for 20 processes 

(ex) [tm5u6@n06p060 labpy]$ mpirun -np 20 python3 newton_cotes_final1.py

11) Enter the file of the name

Name of file:
Name of file: This is the process  1
This is the process  2
This is the process  3
This is the process  4
This is the process  5
This is the process  6
This is the process  7
This is the process  8
This is the process  9
This is the process  10
This is the process  11
This is the process  12
This is the process  13
This is the process  14
This is the process  15
This is the process  16
This is the process  17
This is the process  18
This is the process  19
exp2/exp2_k7.txt

12) Read the input data from file

 #############
Process  0  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
expression =  math.log(x)/x
I =  0.2402265069591007
 #############
Process  8  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
expression =  math.log(x)/x
I =  0.2402265069591007
 #############
Process  16  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
expression =  math.log(x)/x
I =  0.2402265069591007
 #############
Process  2  ===> variables:
a =  1.0
b =  2.0
 #############
Process  4  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
 #############
Process  9  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
 #############
Process  10  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
 #############
Process  12  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
expression =  math.log(x)/x
I =  0.2402265069591007
 #############
Process  17  ===> variables:
a =  1.0
b =  2.0
k =  7
 #############
Process  18  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
 #############
Process  1  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
expression =  math.log(x)/x
I =  0.2402265069591007
 #############
Process  19  ===> variables:
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
 #############
Process  3  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
expression =  math.log(x)/x
I =  0.2402265069591007
k =  7
q =  20
expression =  math.log(x)/x
I =  0.2402265069591007
 #############
Process  5  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
expression =  math.log(x)/x
I =  0.2402265069591007
 #############
Process  6  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
expression =  math.log(x)/x
I =  0.2402265069591007
 #############
Process  7  ===> variables:
a =  1.0
b =  2.0
k =  7
expression =  math.log(x)/x
I =  0.2402265069591007
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
expression =  math.log(x)/x
I =  0.2402265069591007
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
 #############
Process  11  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
expression =  math.log(x)/x
I =  0.2402265069591007
expression =  math.log(x)/x
I =  0.2402265069591007
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
 #############
Process  13  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
expression =  math.log(x)/x
I =  0.2402265069591007
 #############
Process  14  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
expression =  math.log(x)/x
I =  0.2402265069591007
 #############
Process  15  ===> variables:
a =  1.0
b =  2.0
k =  7
q =  20
expression =  math.log(x)/x
I =  0.2402265069591007
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
q =  20
expression =  math.log(x)/x
I =  0.2402265069591007
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
expression =  math.log(x)/x
I =  0.2402265069591007
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
a =  1.0
b =  2.0
k =  7
q =  20
expression =  math.log(x)/x
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
q =  20
expression =  math.log(x)/x
I =  0.2402265069591007
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
I =  0.2402265069591007
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}
Newton-cotes coeff =  {1: {'Ak': 0.5, 'Ci': [1, 1]}, 2: {'Ak': 0.3333333333333333, 'Ci': [1, 4, 1]}, 3: {'Ak': 0.375, 'Ci': [1, 3, 3, 1]}, 4: {'Ak': 0.044444444444444446, 'Ci': [7, 32, 12, 32, 7]}, 5: {'Ak': 0.017361111111111112, 'Ci': [19, 75, 50, 50, 75, 19]}, 6: {'Ak': 0.007142857142857143, 'Ci': [41, 216, 27, 272, 27, 216, 41]}, 7: {'Ak': 0.0004050925925925926, 'Ci': [751, 3577, 1323, 2989, 2989, 1323, 3577, 751]}, 8: {'Ak': 0.0002821869488536155, 'Ci': [989, 5888, -928, 10496, -4540, 10496, -928, 5888, 989]}, 9: {'Ak': 0.00010044642857142857, 'Ci': [2857, 15741, 1080, 19344, 5778, 5778, 19344, 1080, 15741, 2857]}, 10: {'Ak': 1.670140559029448e-05, 'Ci': [16067, 106300, -48525, 272400, -260550, 427368, -260550, 272400, -48525, 106300, 16067]}}


13) Send/Receive of partial-data

Process  0  has f(x) ===>  [0.         0.00706699 0.01398485 0.02075741 0.02738835 0.03388127
 0.04023964 0.04646682]  with partial-integral =  0.0011902400598399958
Time to calculate partial-integral =  0.265437  ms
Process  17  has f(x) ===>  [0.33253278 0.3333288  0.3341108  0.33487897 0.33563356 0.33637475
 0.33710278 0.33781783]  with partial-integral =  0.016761520325873268
Time to calculate partial-integral =  0.270632  ms
Process  19  has f(x) ===>  [0.3424766  0.34309487 0.34370187 0.34429776 0.34488271 0.34545689
 0.34602047 0.34657359]  with partial-integral =  0.01722847152170391
Time to calculate partial-integral =  0.26704  ms
Process  1  has f(x) ===>  [0.04646682 0.05256608 0.05854056 0.06439335 0.0701274  0.07574562
 0.08125078 0.08664562]  with partial-integral =  0.0033517751273262615
Time to calculate partial-integral =  0.274297  ms
Process  16  has f(x) ===>  [0.32654815 0.32744897 0.32833409 0.32920375 0.33005822 0.33089771
 0.33172249 0.33253278]  with partial-integral =  0.01648010355305151
Process  12  has f(x) ===>  [0.29375227 0.2952183  0.29665912 0.29807517 0.29946688 0.30083468
 0.30217897 0.30350017]  with partial-integral =  0.014936238739836821
Process  3  has f(x) ===>  [0.12153212 0.12613301 0.13064472 0.13506927 0.13940865 0.14366477
 0.14783949 0.15193463]  with partial-integral =  0.006853874767647001
Time to calculate partial-integral =  0.27550600000000003  ms
Process  2  has f(x) ===>  [0.08664562 0.09193276 0.09711476 0.1021941  0.1071732  0.1120544
 0.11683997 0.12153212]  with partial-integral =  0.005224685081072195
Process  5  has f(x) ===>  [0.17851484 0.18203307 0.18548601 0.18887504 0.19220153 0.19546678
 0.19867207 0.20181866]  with partial-integral =  0.009520981388225103
Time to calculate partial-integral =  0.29844000000000004  ms
Process  6  has f(x) ===>  [0.20181866 0.20490777 0.20794058 0.21091825 0.21384191 0.21671266
 0.21953157 0.2222997 ]  with partial-integral =  0.010613879570107957
Process  15  has f(x) ===>  [0.31978045 0.32079868 0.3217993  0.3227826  0.32374886 0.32469836
 0.32563136 0.32654815]  with partial-integral =  0.016161666665085984
Time to calculate partial-integral =  0.274416  ms
Process  4  has f(x) ===>  [0.15193463 0.15595196 0.15989319 0.16375999 0.167554   0.17127679
 0.1749299  0.17851484]  with partial-integral =  0.008275947210673058
Time to calculate partial-integral =  0.290375  ms
Process  9  has f(x) ===>  [0.25625073 0.25836696 0.26044614 0.26248895 0.2644961  0.26646823
 0.26840601 0.27031007]  with partial-integral =  0.013171238712205212
Time to calculate partial-integral =  0.273226  ms
Process  18  has f(x) ===>  [0.33781783 0.33852012 0.33920984 0.33988719 0.34055235 0.34120552
 0.34184688 0.3424766 ]  with partial-integral =  0.017009829840094044
Time to calculate partial-integral =  0.29238400000000003  ms
Process  10  has f(x) ===>  [0.27031007 0.27218104 0.27401952 0.27582612 0.27760142 0.27934598
 0.28106036 0.28274512]  with partial-integral =  0.01383271529615311
Time to calculate partial-integral =  0.292472  ms
Process  11  has f(x) ===>  [0.28274512 0.28440078 0.28602787 0.2876269  0.28919837 0.29074277
 0.29226058 0.29375227]  with partial-integral =  0.01441801350934559
Time to calculate partial-integral =  0.300187  ms
Process  13  has f(x) ===>  [0.30350017 0.30479868 0.30607487 0.30732913 0.30856184 0.30977336
 0.31096405 0.31213427]  with partial-integral =  0.01539522592073062
Time to calculate partial-integral =  0.268818  ms
Process  7  has f(x) ===>  [0.2222997  0.22501806 0.22768765 0.23030944 0.23288439 0.23541342
 0.23789743 0.24033731]  with partial-integral =  0.01157539980354899
Time to calculate partial-integral =  0.288938  ms
Process  14  has f(x) ===>  [0.31213427 0.31328434 0.31441463 0.31552544 0.31661712 0.31768997
 0.31874431 0.31978045]  with partial-integral =  0.015801744640643118
Time to calculate partial-integral =  0.295466  ms
Process  8  has f(x) ===>  [0.24033731 0.24273392 0.24508811 0.24740068 0.24967246 0.25190422
 0.25409673 0.25625073]  with partial-integral =  0.012422955225936746
Time to calculate partial-integral =  0.285882  ms
Time to calculate partial-integral =  0.301071  ms
Time to calculate partial-integral =  0.298381  ms
Time to calculate partial-integral =  0.292134  ms
Time to calculate partial-integral =  0.29601900000000003  ms
Time to send/recv part-integrals =  0.21692400000000006  ms
Time to send/recv part-integrals =  0.018687999999999996  ms
Time to send/recv part-integrals =  0.016476999999999985  ms
Time to send/recv part-integrals =  0.015505999999999983  ms
Time to send/recv part-integrals =  0.01505499999999993  ms
Time to send/recv part-integrals =  0.023636999999999964  ms
Time to send/recv part-integrals =  0.01528300000000005  ms
Time to send/recv part-integrals =  0.01486800000000013  ms
Time to send/recv part-integrals =  0.014600999999999937  ms
Time to send/recv part-integrals =  0.014691000000000053  ms
Time to send/recv part-integrals =  0.01466499999999986  ms
Time to send/recv part-integrals =  0.014757999999999915  ms
Time to send/recv part-integrals =  0.014769999999999887  ms
Time to send/recv part-integrals =  0.014775000000000075  ms
Time to send/recv part-integrals =  0.013215999999999922  ms
Time to send/recv part-integrals =  0.013173000000000004  ms
Time to send/recv part-integrals =  0.01311699999999999  ms
Time to send/recv part-integrals =  0.013470000000000018  ms
Time to send/recv part-integrals =  0.013287000000000064  ms

14) Final results

Time to calculate approx-integral =  0.014675000000000018  ms

***** FINAL RESULTS ***** from process  0
Integral  math.log(x)/x  with limits = (  1.0 ,  2.0 ) ===>
Exact-integral =  0.2402265069591007
Approximate-integral =  0.24022650695910053
Absolute-error =  1.6653345369377348e-16
Relative-error =  6.932351296359078e-14 %
Total-time to compute aproximate integral =  6.206757  ms
Finish!



########################### FILE exp3/exp3_k10.txt #############################

10) execute python program for exp3_k10.txt for 20 processes 

(ex) [tm5u6@n06p060 labpy]$ mpirun -np 20 python3 newton_cotes_final1.py

11) Enter the name of the file

Name of file:
Name of file: This is the process  1
This is the process  2
This is the process  3
This is the process  4
This is the process  5
This is the process  6
This is the process  7
This is the process  8
This is the process  9
This is the process  10
This is the process  11
This is the process  12
This is the process  13
This is the process  14
This is the process  15
This is the process  16
This is the process  17
This is the process  18
This is the process  19
exp3/exp3_k10.txt

12) Partition of data

0  process ======>  [0.    0.005 0.01  0.015 0.02  0.025 0.03  0.035 0.04  0.045 0.05 ]
12  process ======>  [0.6   0.605 0.61  0.615 0.62  0.625 0.63  0.635 0.64  0.645 0.65 ]
19  process ======>  [0.95  0.955 0.96  0.965 0.97  0.975 0.98  0.985 0.99  0.995 1.   ]
1  process ======>  [0.05  0.055 0.06  0.065 0.07  0.075 0.08  0.085 0.09  0.095 0.1  ]
8  process ======>  [0.4   0.405 0.41  0.415 0.42  0.425 0.43  0.435 0.44  0.445 0.45 ]
11  process ======>  [0.55  0.555 0.56  0.565 0.57  0.575 0.58  0.585 0.59  0.595 0.6  ]
3  process ======>  [0.15  0.155 0.16  0.165 0.17  0.175 0.18  0.185 0.19  0.195 0.2  ]
16  process ======>  [0.8   0.805 0.81  0.815 0.82  0.825 0.83  0.835 0.84  0.845 0.85 ]
5  process ======>  [0.25  0.255 0.26  0.265 0.27  0.275 0.28  0.285 0.29  0.295 0.3  ]
2  process ======>  [0.1   0.105 0.11  0.115 0.12  0.125 0.13  0.135 0.14  0.145 0.15 ]
18  process ======>  [0.9   0.905 0.91  0.915 0.92  0.925 0.93  0.935 0.94  0.945 0.95 ]
4  process ======>  [0.2   0.205 0.21  0.215 0.22  0.225 0.23  0.235 0.24  0.245 0.25 ]
9  process ======>  [0.45  0.455 0.46  0.465 0.47  0.475 0.48  0.485 0.49  0.495 0.5  ]
10  process ======>  [0.5   0.505 0.51  0.515 0.52  0.525 0.53  0.535 0.54  0.545 0.55 ]
15  process ======>  [0.75  0.755 0.76  0.765 0.77  0.775 0.78  0.785 0.79  0.795 0.8  ]
6  process ======>  [0.3   0.305 0.31  0.315 0.32  0.325 0.33  0.335 0.34  0.345 0.35 ]
13  process ======>  [0.65  0.655 0.66  0.665 0.67  0.675 0.68  0.685 0.69  0.695 0.7  ]
14  process ======>  [0.7   0.705 0.71  0.715 0.72  0.725 0.73  0.735 0.74  0.745 0.75 ]
7  process ======>  [0.35  0.355 0.36  0.365 0.37  0.375 0.38  0.385 0.39  0.395 0.4  ]
17  process ======>  [0.85  0.855 0.86  0.865 0.87  0.875 0.88  0.885 0.89  0.895 0.9  ]

13) Computation of partial-integrals and send/recv

Process  12  has f(x) ===>  [0.69767633 0.69348546 0.68928531 0.68507634 0.68085903 0.67663385
 0.67240126 0.66816175 0.66391576 0.65966378 0.65540625]  with partial-integral =  0.03383015002484064
Time to calculate partial-integral =  0.859534  ms
Process  19  has f(x) ===>  [0.40555451 0.40170994 0.39788192 0.39407068 0.39027643 0.38649939
 0.38273976 0.37899775 0.37527357 0.3715674  0.36787944]  with partial-integral =  0.019328596550197388
Time to calculate partial-integral =  0.843599  ms
Process  1  has f(x) ===>  [0.99750312 0.99697957 0.99640647 0.99578391 0.99511199 0.99439079
 0.99362044 0.99280104 0.99193272 0.9910156  0.99004983]  with partial-integral =  0.04970929972559518
Time to calculate partial-integral =  0.8534219999999999  ms
Process  8  has f(x) ===>  [0.85214379 0.8487208  0.8452693  0.84178975 0.8382826  0.83474833
 0.8311874  0.82760028 0.82398743 0.82034934 0.81668648]  with partial-integral =  0.04173186293527989
Time to calculate partial-integral =  0.9547479999999999  ms
Process  11  has f(x) ===>  [0.73896849 0.73489695 0.73081129 0.72671202 0.72259961 0.71847455
 0.71433731 0.71018839 0.70602827 0.70185742 0.69767633]  with partial-integral =  0.035921191834079685
Time to calculate partial-integral =  0.9070769999999999  ms
Process  3  has f(x) ===>  [0.97775124 0.9762613  0.9747249  0.97314226 0.97151361 0.96983919
 0.96811926 0.96635405 0.96454383 0.96268887 0.96078944]  with partial-integral =  0.04848247767984914
Time to calculate partial-integral =  0.826924  ms
Process  16  has f(x) ===>  [0.52729242 0.52307784 0.51887099 0.51467224 0.51048195 0.50630046
 0.50212811 0.49796524 0.4938122  0.48966931 0.4855369 ]  with partial-integral =  0.025316926910503624
Time to calculate partial-integral =  0.9394629999999999  ms
Process  5  has f(x) ===>  [0.93941306 0.93704404 0.93463425 0.93218405 0.92969379 0.92716383
 0.92459451 0.92198622 0.91933932 0.91665418 0.91393119]  with partial-integral =  0.046349995476709725
Time to calculate partial-integral =  0.915057  ms
Process  2  has f(x) ===>  [0.99004983 0.98903555 0.98797291 0.98686207 0.98570318 0.98449644
 0.983242   0.98194007 0.98059083 0.97919448 0.97775124]  with partial-integral =  0.049214888956185386
Time to calculate partial-integral =  0.861375  ms
Process  9  has f(x) ===>  [0.81668648 0.81299932 0.80928835 0.80555403 0.80179686 0.7980173
 0.79421585 0.79039299 0.7865492  0.78268497 0.77880078]  with partial-integral =  0.039896303777037276
Time to calculate partial-integral =  0.9070050000000001  ms
Process  10  has f(x) ===>  [0.77880078 0.77489713 0.77097448 0.76703335 0.7630742  0.75909754
 0.75510384 0.7510936  0.7470673  0.74302544 0.73896849]  with partial-integral =  0.03795132856120659
Time to calculate partial-integral =  0.943882  ms
Process  15  has f(x) ===>  [0.56978282 0.5655113  0.56124374 0.55698053 0.55272206 0.54846874
 0.54422093 0.53997902 0.53574338 0.53151439 0.52729242]  with partial-integral =  0.02742458559723299
Time to calculate partial-integral =  0.8926700000000001  ms
Process  6  has f(x) ===>  [0.91393119 0.91117072 0.90837317 0.90553894 0.90266841 0.899762
 0.8968201  0.89384312 0.89083148 0.88778561 0.8847059 ]  with partial-integral =  0.04498070824351428
Time to calculate partial-integral =  0.842449  ms
Process  13  has f(x) ===>  [0.65540625 0.65114365 0.64687642 0.64260503 0.63832993 0.63405156
 0.62977038 0.62548683 0.62120136 0.6169144  0.61262639]  with partial-integral =  0.03170199124982489
Time to calculate partial-integral =  0.8883880000000001  ms
Process  14  has f(x) ===>  [0.61262639 0.60833778 0.60404897 0.59976042 0.59547254 0.59118576
 0.58690049 0.58261715 0.57833615 0.57405791 0.56978282]  with partial-integral =  0.029559602648418403
Time to calculate partial-integral =  0.906396  ms
Process  0  has f(x) ===>  [1.         0.999975   0.9999     0.99977503 0.99960008 0.9993752
 0.9991004  0.99877575 0.99840128 0.99797705 0.99750312]  with partial-integral =  0.04995836456474119
Time to calculate partial-integral =  0.7506569999999999  ms
Process  7  has f(x) ===>  [0.8847059  0.88159281 0.87844674 0.87526813 0.87205743 0.86881506
 0.86554146 0.86223709 0.85890239 0.8555378  0.85214379]  with partial-integral =  0.04343424879999545
Time to calculate partial-integral =  0.907749  ms
Process  17  has f(x) ===>  [0.4855369  0.48141529 0.4773048  0.47320575 0.46911844 0.46504319
 0.46098029 0.45693003 0.45289272 0.44886864 0.44485807]  with partial-integral =  0.023254731724640643
Time to calculate partial-integral =  0.853661  ms
Process  18  has f(x) ===>  [0.44485807 0.44086128 0.43687857 0.43291018 0.4289564  0.42501747
 0.42109366 0.41718521 0.41329238 0.4094154  0.40555451]  with partial-integral =  0.02125402129868974
Time to calculate partial-integral =  1.040853  ms
Process  4  has f(x) ===>  [0.96078944 0.95884581 0.95685827 0.9548271  0.95275261 0.95063509
 0.94847486 0.94627221 0.94402748 0.94174099 0.93941306]  with partial-integral =  0.047522856253884964

Time to calculate partial-integral =  0.9027850000000001  ms
Time to send/recv part-integrals =  0.19794699999999996  ms
Time to send/recv part-integrals =  0.017511000000000002  ms
Time to send/recv part-integrals =  0.015548999999999901  ms
Time to send/recv part-integrals =  0.01927700000000005  ms
Time to send/recv part-integrals =  0.014494000000000095  ms
Time to send/recv part-integrals =  0.014519000000000164  ms
Time to send/recv part-integrals =  0.014656999999999951  ms
Time to send/recv part-integrals =  0.014291000000000043  ms
Time to send/recv part-integrals =  0.014497999999999941  ms
Time to send/recv part-integrals =  0.023446000000000317  ms
Time to send/recv part-integrals =  0.013556999999999979  ms
Time to send/recv part-integrals =  0.013421999999999913  ms
Time to send/recv part-integrals =  0.013621000000000119  ms
Time to send/recv part-integrals =  0.013379999999999902  ms
Time to send/recv part-integrals =  0.013428000000000224  ms
Time to send/recv part-integrals =  0.013395000000000247  ms
Time to send/recv part-integrals =  0.013374000000000025  ms
Time to send/recv part-integrals =  0.013307999999999636  ms
Time to send/recv part-integrals =  0.013561000000000042  ms

Time to calculate approx-integral =  0.013746999999999718  ms

14) Final results

***** FINAL RESULTS ***** from process  0
Integral  math.exp(-x**2)  with limits = (  0.0 ,  1.0 ) ===>
Exact-integral =  0.746824132812427
Approximate-integral =  0.7468241328124271
Absolute-error =  1.1102230246251565e-16
Relative-error =  1.4865923258856463e-14 %
Total-time to compute aproximate integral =  18.278676  ms


########################### FILE exp4/exp4_k8.txt #############################

10) execute python program for exp4_k8.txt for 24 processes 

(ex) [tm5u6@n06p060 labpy]$ mpirun -np 24 python3 newton_cotes_final1.py

11) Enter the name of the file

Name of file:
Name of file: This is the process  2
This is the process  4
This is the process  6
This is the process  8
This is the process  10
This is the process  12
This is the process  14
This is the process  15
This is the process  16
This is the process  17
This is the process  18
This is the process  19
This is the process  20
This is the process  21
This is the process  22
This is the process  23
This is the process  1
This is the process  3
This is the process  5
This is the process  7
This is the process  9
This is the process  11
This is the process  13
exp4/exp4_k8.txt

12) Partition of data

0  process ======>  [0.75       0.75130208 0.75260417 0.75390625 0.75520833 0.75651042
 0.7578125  0.75911458 0.76041667]
16  process ======>  [0.91666667 0.91796875 0.91927083 0.92057292 0.921875   0.92317708
 0.92447917 0.92578125 0.92708333]
22  process ======>  [0.97916667 0.98046875 0.98177083 0.98307292 0.984375   0.98567708
 0.98697917 0.98828125 0.98958333]
1  process ======>  [0.76041667 0.76171875 0.76302083 0.76432292 0.765625   0.76692708
 0.76822917 0.76953125 0.77083333]
2  process ======>  [0.77083333 0.77213542 0.7734375  0.77473958 0.77604167 0.77734375
 0.77864583 0.77994792 0.78125   ]
3  process ======>  [0.78125    0.78255208 0.78385417 0.78515625 0.78645833 0.78776042
 0.7890625  0.79036458 0.79166667]
23  process ======>  [0.98958333 0.99088542 0.9921875  0.99348958 0.99479167 0.99609375
 0.99739583 0.99869792 1.        ]
13  process ======>  [0.88541667 0.88671875 0.88802083 0.88932292 0.890625   0.89192708
 0.89322917 0.89453125 0.89583333]
5  process ======>  [0.80208333 0.80338542 0.8046875  0.80598958 0.80729167 0.80859375
 0.80989583 0.81119792 0.8125    ]
6  process ======>  [0.8125     0.81380208 0.81510417 0.81640625 0.81770833 0.81901042
 0.8203125  0.82161458 0.82291667]
15  process ======>  [0.90625    0.90755208 0.90885417 0.91015625 0.91145833 0.91276042
 0.9140625  0.91536458 0.91666667]
4  process ======>  [0.79166667 0.79296875 0.79427083 0.79557292 0.796875   0.79817708
 0.79947917 0.80078125 0.80208333]
9  process ======>  [0.84375    0.84505208 0.84635417 0.84765625 0.84895833 0.85026042
 0.8515625  0.85286458 0.85416667]
10  process ======>  [0.85416667 0.85546875 0.85677083 0.85807292 0.859375   0.86067708
 0.86197917 0.86328125 0.86458333]
11  process ======>  [0.86458333 0.86588542 0.8671875  0.86848958 0.86979167 0.87109375
 0.87239583 0.87369792 0.875     ]
12  process ======>  [0.875      0.87630208 0.87760417 0.87890625 0.88020833 0.88151042
 0.8828125  0.88411458 0.88541667]
7  process ======>  [0.82291667 0.82421875 0.82552083 0.82682292 0.828125   0.82942708
 0.83072917 0.83203125 0.83333333]
14  process ======>  [0.89583333 0.89713542 0.8984375  0.89973958 0.90104167 0.90234375
 0.90364583 0.90494792 0.90625   ]
8  process ======>  [0.83333333 0.83463542 0.8359375  0.83723958 0.83854167 0.83984375
 0.84114583 0.84244792 0.84375   ]
17  process ======>  [0.92708333 0.92838542 0.9296875  0.93098958 0.93229167 0.93359375
 0.93489583 0.93619792 0.9375    ]
18  process ======>  [0.9375     0.93880208 0.94010417 0.94140625 0.94270833 0.94401042
 0.9453125  0.94661458 0.94791667]
19  process ======>  [0.94791667 0.94921875 0.95052083 0.95182292 0.953125   0.95442708
 0.95572917 0.95703125 0.95833333]
20  process ======>  [0.95833333 0.95963542 0.9609375  0.96223958 0.96354167 0.96484375
 0.96614583 0.96744792 0.96875   ]
21  process ======>  [0.96875    0.97005208 0.97135417 0.97265625 0.97395833 0.97526042
 0.9765625  0.97786458 0.97916667]

13) Computation of partial-integrals and send/recv

Process  0  has f(x) ===>  [0.2316604  0.23247548 0.23329112 0.23410732 0.23492406 0.23574135
 0.23655917 0.23737753 0.23819641]  with partial-integral =  0.0024471407378925366
Time to calculate partial-integral =  0.434992  ms
Process  1  has f(x) ===>  [0.23819641 0.23901581 0.23983573 0.24065616 0.24147709 0.24229852
 0.24312044 0.24394285 0.24476574]  with partial-integral =  0.002515400190354517
Time to calculate partial-integral =  0.433544  ms
Process  2  has f(x) ===>  [0.24476574 0.24558911 0.24641295 0.24723726 0.24806203 0.24888725
 0.24971292 0.25053904 0.2513656 ]  with partial-integral =  0.002583992104495886
Time to calculate partial-integral =  0.44442800000000005  ms
Process  3  has f(x) ===>  [0.2513656  0.25219259 0.25302001 0.25384785 0.25467611 0.25550479
 0.25633387 0.25716335 0.25799323]  with partial-integral =  0.0026528876348766296
Time to calculate partial-integral =  0.44931000000000004  ms
Process  23  has f(x) ===>  [0.3859968  0.38683538 0.38767374 0.38851188 0.38934978 0.39018746
 0.39102491 0.39186211 0.39269908]  with partial-integral =  0.004055720514110821
Time to calculate partial-integral =  0.434622  ms
Process  13  has f(x) ===>  [0.31846924 0.31931506 0.32016095 0.32100688 0.32185285 0.32269887
 0.32354493 0.32439102 0.32523714]  with partial-integral =  0.003352635065221722
Time to calculate partial-integral =  0.434805  ms
Process  5  has f(x) ===>  [0.26464597 0.26547919 0.26631276 0.26714667 0.26798092 0.2688155
 0.2696504  0.27048563 0.27132117]  with partial-integral =  0.002791477121591575
Time to calculate partial-integral =  0.435853  ms
Process  6  has f(x) ===>  [0.27132117 0.27215702 0.27299318 0.27382964 0.2746664  0.27550344
 0.27634078 0.27717839 0.27801628]  with partial-integral =  0.0028611163960676604
Time to calculate partial-integral =  0.443157  ms
Process  15  has f(x) ===>  [0.3320067  0.33285291 0.33369911 0.3345453  0.33539148 0.33623763
 0.33708376 0.33792985 0.33877592]  with partial-integral =  0.003493660639574701
Time to calculate partial-integral =  0.45199  ms
Process  4  has f(x) ===>  [0.25799323 0.25882351 0.25965417 0.26048521 0.26131663 0.26214842
 0.26298057 0.26381309 0.26464597]  with partial-integral =  0.002722058524361619
Time to calculate partial-integral =  0.43438  ms
Process  9  has f(x) ===>  [0.29145628 0.29229815 0.29314021 0.29398246 0.29482489 0.2956675
 0.29651028 0.29735323 0.29819635]  with partial-integral =  0.0030710975451025933
Time to calculate partial-integral =  0.477778  ms
Process  10  has f(x) ===>  [0.29819635 0.29903963 0.29988306 0.30072664 0.30157038 0.30241425
 0.30325826 0.30410241 0.30494669]  with partial-integral =  0.0031413620450231492
Time to calculate partial-integral =  0.437826  ms
Process  11  has f(x) ===>  [0.30494669 0.30579109 0.30663561 0.30748025 0.308325   0.30916986
 0.31001482 0.31085989 0.31170504]  with partial-integral =  0.003211721758366494
Time to calculate partial-integral =  0.442422  ms
Process  12  has f(x) ===>  [0.31170504 0.31255029 0.31339563 0.31424105 0.31508655 0.31593212
 0.31677776 0.31762347 0.31846924]  with partial-integral =  0.0032821535777440482
Time to calculate partial-integral =  0.43908  ms
Process  7  has f(x) ===>  [0.27801628 0.27885445 0.27969288 0.28053157 0.28137052 0.28220972
 0.28304918 0.28388887 0.2847288 ]  with partial-integral =  0.002930949950967968
Time to calculate partial-integral =  0.43914699999999995  ms
Process  14  has f(x) ===>  [0.32523714 0.32608329 0.32692946 0.32777564 0.32862184 0.32946805
 0.33031427 0.33116048 0.3320067 ]  with partial-integral =  0.003423144452475975
Time to calculate partial-integral =  0.437786  ms
Process  8  has f(x) ===>  [0.2847288  0.28556897 0.28640936 0.28724998 0.28809082 0.28893188
 0.28977314 0.29061461 0.29145628]  with partial-integral =  0.003000952033813792
Time to calculate partial-integral =  0.43564400000000003  ms
Process  17  has f(x) ===>  [0.34554288 0.34638849 0.34723404 0.34807951 0.34892491 0.34977024
 0.35061548 0.35146063 0.35230569]  with partial-integral =  0.0036346323393869873
Time to calculate partial-integral =  0.441239  ms
Process  18  has f(x) ===>  [0.35230569 0.35315066 0.35399554 0.35484031 0.35568498 0.35652955
 0.35737401 0.35821835 0.35906257]  with partial-integral =  0.0037050489659372697
Time to calculate partial-integral =  0.437224  ms
Process  19  has f(x) ===>  [0.35906257 0.35990668 0.36075066 0.36159451 0.36243824 0.36328183
 0.36412528 0.3649686  0.36581177]  with partial-integral =  0.0037753946094861075
Time to calculate partial-integral =  0.439324  ms
Process  20  has f(x) ===>  [0.36581177 0.3666548  0.36749767 0.3683404  0.36918296 0.37002537
 0.37086762 0.3717097  0.37255161]  with partial-integral =  0.003845651452418489
Time to calculate partial-integral =  0.434257  ms
Process  21  has f(x) ===>  [0.37255161 0.37339335 0.37423492 0.37507631 0.37591751 0.37675854
 0.37759937 0.37844002 0.37928047]  with partial-integral =  0.003915802314649685
Time to calculate partial-integral =  0.439013  ms
Process  16  has f(x) ===>  [0.33877592 0.33962195 0.34046795 0.3413139  0.3421598  0.34300565
 0.34385145 0.34469719 0.34554288]  with partial-integral =  0.003564163192482573
Time to calculate partial-integral =  0.432857  ms
Process  22  has f(x) ===>  [0.37928047 0.38012073 0.38096079 0.38180064 0.3826403  0.38347974
 0.38431897 0.38515799 0.3859968 ]  with partial-integral =  0.00398583064537007

Time to calculate partial-integral =  0.440942  ms
Time to send/recv part-integrals =  0.2541039999999999  ms
Time to send/recv part-integrals =  0.018539000000000142  ms
Time to send/recv part-integrals =  0.01698499999999996  ms
Time to send/recv part-integrals =  0.01597300000000007  ms
Time to send/recv part-integrals =  0.015196999999999997  ms
Time to send/recv part-integrals =  0.015391999999999923  ms
Time to send/recv part-integrals =  0.015302999999999931  ms
Time to send/recv part-integrals =  0.015088000000000124  ms
Time to send/recv part-integrals =  0.015285000000000082  ms
Time to send/recv part-integrals =  0.015220000000000034  ms
Time to send/recv part-integrals =  0.015150999999999923  ms
Time to send/recv part-integrals =  0.013430999999999946  ms
Time to send/recv part-integrals =  0.01335500000000005  ms
Time to send/recv part-integrals =  0.013376999999999964  ms
Time to send/recv part-integrals =  0.013500000000000057  ms
Time to send/recv part-integrals =  0.013533000000000035  ms
Time to send/recv part-integrals =  0.01359400000000002  ms
Time to send/recv part-integrals =  0.013306999999999946  ms
Time to send/recv part-integrals =  0.01362300000000015  ms
Time to send/recv part-integrals =  0.01346200000000011  ms
Time to send/recv part-integrals =  0.013487999999999868  ms
Time to send/recv part-integrals =  0.01354900000000007  ms
Time to send/recv part-integrals =  0.013385999999999997  ms
Time to calculate approx-integral =  0.013633999999999999  ms

14) Final results

***** FINAL RESULTS ***** from process  0

Integral  math.atan(x)/(1+(1/x)**2)  with limits = (  0.75 ,  1.0 ) ===>
Exact-integral =  0.07796399381177285
Approximate-integral =  0.0779639938117729
Absolute-error =  4.163336342344337e-17
Relative-error =  5.3400757693298896e-14 %
Total-time to compute aproximate integral =  11.159095999999998  ms
Finish!

